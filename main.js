// --- Low-Level Module: Core blockchain logic and data --- const FREE_BASER_ADDRESS = "0x3bA341ea464ae63372Bfe60B572E677CE0d9a3Ba"; const DISPENSER_ADDRESS = "0xB709FafF4f731bfD767354738cB8A38D08a92920"; const PENG_NFT_ADDRESS = "0xB1a58fae5C0E952F64f9433789a350b8ab54D6D0"; const WPOL_ADDRESS = "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270"; const LUSD_ADDRESS = "0xF0FD398Ca09444F771eC968d9cbF073a744A544c"; const FREE_BASER_ABI = [ {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"caller","type":"address"},{"indexed":false,"internalType":"bool","name":"paid","type":"bool"}],"name":"FreebaseExecuted","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newLUSD","type":"address"}],"name":"LUSDSet","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newNFT","type":"address"}],"name":"NFTSet","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}, {"inputs":[],"name":"COOLDOWN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"LUSD","outputs":[{"internalType":"contract ILUSD","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"NFT","outputs":[{"internalType":"contract IERC721","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"REWARD_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"freebase","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"_lusd","type":"address"}],"name":"setLUSD","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"_nft","type":"address"}],"name":"setNFT","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"} ]; const DISPENSER_ABI = [ {"inputs":[{"internalType":"uint256","name":"decimals","type":"uint256"}],"name":"DecimalsGreaterThan18","type":"error"}, {"inputs":[],"name":"InsufficientBalance","type":"error"}, {"inputs":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}],"name":"MulDiv18Overflow","type":"error"}, {"inputs":[],"name":"RejectedZeroAmount","type":"error"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}, {"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"convert","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"lusd","outputs":[{"internalType":"contract ILUSD","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"addr","type":"address"}],"name":"setLUSD","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"} ]; const PENG_NFT_ABI = [ {"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"string","name":"_initBaseURI","type":"string"}],"stateMutability":"nonpayable","type":"constructor"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"}, {"inputs":[{"internalType":"address[100]","name":"_users","type":"address[100]"}],"name":"add100PresaleUsers","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"addPresaleUser","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"baseExtension","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"baseURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"cost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"maxMintAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"maxSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_mintAmount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"}, {"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"bool","name":"_state","type":"bool"}],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"presaleCost","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"presaleWallets","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"removePresaleUser","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"removeWhitelistUser","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"string","name":"_newBaseExtension","type":"string"}],"name":"setBaseExtension","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"string","name":"_newBaseURI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"uint256","name":"_newCost","type":"uint256"}],"name":"setCost","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"uint256","name":"_newCost","type":"uint256"}],"name":"setPresaleCost","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"uint256","name":"_newmaxMintAmount","type":"uint256"}],"name":"setmaxMintAmount","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"walletOfOwner","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"whitelistUser","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"payable","type":"function"} ]; const LUSD_ABI = [ {"inputs":[],"stateMutability":"nonpayable","type":"constructor"}, {"inputs":[{"internalType":"uint256","name":"decimals","type":"uint256"}],"name":"DecimalsGreaterThan18","type":"error"}, {"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"}, {"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"}, {"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"}, {"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"}, {"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"}, {"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}, {"inputs":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}],"name":"MulDiv18Overflow","type":"error"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}, {"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"addr","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Taxed","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"}, {"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"getBalances","outputs":[{"internalType":"uint256","name":"balanceZero","type":"uint256"},{"internalType":"uint256","name":"balanceOne","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"getPrice","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"address","name":"liquidityAddr","type":"address"},{"internalType":"address","name":"oracleAddr","type":"address"},{"internalType":"address","name":"tokenZeroAddr","type":"address"},{"internalType":"address","name":"taxAddr","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"liquidity","outputs":[{"internalType":"contract ILiquidity","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"oracle","outputs":[{"internalType":"contract IAggregator","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"rebase","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"liquidityAddr","type":"address"}],"name":"setLiquidity","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"oracleAddr","type":"address"}],"name":"setOracle","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"taxAddr","type":"address"}],"name":"setTaxCollector","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"tokenZeroAddr","type":"address"}],"name":"setTokenZero","outputs":[],"stateMutability":"nonpayable","type":"function"}, {"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"taxCollector","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"tokenZero","outputs":[{"internalType":"contract ERC20Interface","name":"","type":"address"}],"stateMutability":"view","type":"function"}, {"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}, {"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}, {"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"} ]; const WPOL_ABI = [ {"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}, {"constant":false,"inputs":[{"name":"guy","type":"address"},{"name":"wad","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}, {"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}, {"constant":false,"inputs":[{"name":"src","type":"address"},{"name":"dst","type":"address"},{"name":"wad","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}, {"constant":false,"inputs":[{"name":"wad","type":"uint256"}],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}, {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}, {"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}, {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"}, {"constant":false,"inputs":[{"name":"dst","type":"address"},{"name":"wad","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"}, {"constant":false,"inputs":[],"name":"deposit","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}, {"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}, {"payable":true,"stateMutability":"payable","type":"fallback"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"src","type":"address"},{"indexed":true,"internalType":"address","name":"guy","type":"address"},{"indexed":false,"internalType":"uint256","name":"wad","type":"uint256"}],"name":"Approval","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"src","type":"address"},{"indexed":true,"internalType":"address","name":"dst","type":"address"},{"indexed":false,"internalType":"uint256","name":"wad","type":"uint256"}],"name":"Transfer","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"dst","type":"address"},{"indexed":false,"internalType":"uint256","name":"wad","type":"uint256"}],"name":"Deposit","type":"event"}, {"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"src","type":"address"},{"indexed":false,"internalType":"uint256","name":"wad","type":"uint256"}],"name":"Withdrawal","type":"event"} ]; const POLYGON_CHAIN_ID = 137; const POLYGON_RPCS = { 137: [ "https://polygon-rpc.com", "https://rpc-mainnet.matic.network", "https://matic-mainnet.chainstacklabs.com", "https://rpc-mainnet.maticvigil.com" ] }; const POLYGON_NETWORK_CONFIG = { chainId: "0x" + POLYGON_CHAIN_ID.toString(16), chainName: "Polygon PoS", nativeCurrency: { name: "POL", symbol: "POL", decimals: 18 }, rpcUrls: POLYGON_RPCS[137], blockExplorerUrls: ["https://polygonscan.com"] }; const POLYGON_ICON = "https://i.ibb.co/LDQFMHPS/matic-logo-1.webp"; const OTHER_CHAIN_ICON = "🌐"; let provider = null; let web3 = null; let connectedAccount = null; function normalize_amount(amount, decimals = 18) { const parsedAmount = parseFloat(amount); if (isNaN(parsedAmount)) return { success: false, error: "Invalid amount" }; const normalized = web3.utils.toBN(Math.round(parsedAmount * 10 ** decimals)).toString(); return { success: true, value: normalized }; } async function check_approval(spenderAddress, amount) { const wpolContract = new web3.eth.Contract(WPOL_ABI, WPOL_ADDRESS); try { const allowance = await wpolContract.methods.allowance(connectedAccount, spenderAddress).call(); const amountBN = web3.utils.toBN(amount); return amountBN.lte(web3.utils.toBN(allowance)); } catch (error) { return false; } } async function approve_wpol(spenderAddress, amount) { const wpolContract = new web3.eth.Contract(WPOL_ABI, WPOL_ADDRESS); try { const tx = await wpolContract.methods.approve(spenderAddress, amount).send({ from: connectedAccount }); return { success: true, txHash: tx.transactionHash }; } catch (error) { return { success: false, error: error.message }; } } function init_wallet_connect() { const randomRpc = POLYGON_RPCS[137][Math.floor(Math.random() * POLYGON_RPCS[137].length)]; provider = new WalletConnectProvider({ rpc: { 137: randomRpc }, qrcode: true, }); provider.on("error", async (error) => { console.error("Provider error:", error); await switch_rpc(); }); return provider; } async function switch_rpc() { if (!provider) return; const currentRpc = provider.rpc.rpc[137]; const availableRpcs = POLYGON_RPCS[137].filter(rpc => rpc !== currentRpc); if (availableRpcs.length > 0) { const newRpc = availableRpcs[Math.floor(Math.random() * availableRpcs.length)]; provider.rpc.rpc[137] = newRpc; console.log(`Switched RPC to: ${newRpc}`); try { await provider.disconnect(); await provider.enable(); web3 = new Web3(provider); } catch (error) { console.error("Failed to switch RPC:", error); } } } async function handle_network(networkIcon) { const chainId = await web3.eth.getChainId(); const networkStatus = document.getElementById("networkStatus"); const networkError = document.getElementById("networkError"); if (chainId === POLYGON_CHAIN_ID) { networkIcon.outerHTML = `<img id="networkIcon" src="${POLYGON_ICON}" alt="Polygon PoS Icon">`; networkStatus.innerHTML = `<img id="networkIcon" src="${POLYGON_ICON}" alt="Polygon PoS Icon"> Network: Polygon PoS (Chain ID: ${chainId})`; networkError.style.display = "none"; return { success: true }; } else { networkIcon.outerHTML = `<span id="networkIcon" class="emoji">${OTHER_CHAIN_ICON}</span>`; networkStatus.innerHTML = `<span id="networkIcon" class="emoji">${OTHER_CHAIN_ICON}</span> Network: Unknown (Chain ID: ${chainId})`; networkError.style.display = "block"; return { success: false, error: "Wrong network" }; } } async function switch_to_polygon() { try { await provider.request({ method: "wallet_switchEthereumChain", params: [{ chainId: POLYGON_NETWORK_CONFIG.chainId }], }); } catch (switchError) { if (switchError.code === 4902) { await provider.request({ method: "wallet_addEthereumChain", params: [POLYGON_NETWORK_CONFIG], }); } else { throw switchError; } } return { success: true }; } async function connect_wallet(networkIcon) { try { const wcProvider = init_wallet_connect(); await wcProvider.enable(); web3 = new Web3(wcProvider); const accounts = await web3.eth.getAccounts(); connectedAccount = accounts[0]; const networkResult = await handle_network(networkIcon); if (!networkResult.success) { await switch_to_polygon(); await handle_network(document.getElementById("networkIcon")); } const pengContract = new web3.eth.Contract(PENG_NFT_ABI, PENG_NFT_ADDRESS); const balance = await pengContract.methods.balanceOf(connectedAccount).call(); const freebaseButton = document.getElementById("freebaseButton"); if (balance >= 1) { freebaseButton.classList.remove("hidden"); } else { freebaseButton.classList.add("hidden"); } return { success: true, account: connectedAccount }; } catch (error) { return { success: false, error: error.message }; } } async function disconnect_wallet() { if (provider) { await provider.disconnect(); provider = null; web3 = null; connectedAccount = null; const freebaseButton = document.getElementById("freebaseButton"); freebaseButton.classList.add("hidden"); } } async function execute_freebase(networkIcon) { if (!web3 || !connectedAccount) return { success: false, error: "Wallet not connected" }; const networkResult = await handle_network(networkIcon); if (!networkResult.success) return { success: false, error: "Wrong network" }; const freebaserContract = new web3.eth.Contract(FREE_BASER_ABI, FREE_BASER_ADDRESS); try { const tx = await freebaserContract.methods.freebase().send({ from: connectedAccount }); return { success: true, txHash: tx.transactionHash }; } catch (error) { return { success: false, error: error.message }; } } async function dispense_wpol(amount, networkIcon) { if (!web3 || !connectedAccount) return { success: false, error: "Wallet not connected" }; const networkResult = await handle_network(networkIcon); if (!networkResult.success) return { success: false, error: "Wrong network" }; const normalized = normalize_amount(amount); if (!normalized.success) return { success: false, error: normalized.error }; const isApproved = await check_approval(DISPENSER_ADDRESS, normalized.value); if (!isApproved) return { success: false, error: "Insufficient WPOL approval" }; const dispenserContract = new web3.eth.Contract(DISPENSER_ABI, DISPENSER_ADDRESS); try { const tx = await dispenserContract.methods.convert(normalized.value).send({ from: connectedAccount }); return { success: true, txHash: tx.transactionHash }; } catch (error) { return { success: false, error: error.message }; } } async function mint_nfts(mintAmount, networkIcon) { if (!web3 || !connectedAccount) return { success: false, error: "Wallet not connected" }; const networkResult = await handle_network(networkIcon); if (!networkResult.success) return { success: false, error: "Wrong network" }; const pengContract = new web3.eth.Contract(PENG_NFT_ABI, PENG_NFT_ADDRESS); try { const costPerNFT = await pengContract.methods.cost().call(); const isPresale = await pengContract.methods.presaleWallets(connectedAccount).call(); const totalCost = isPresale ? await pengContract.methods.presaleCost().call() : costPerNFT; const normalizedCost = normalize_amount((parseInt(mintAmount) * web3.utils.fromWei(totalCost, "ether")).toString()); if (!normalizedCost.success) return { success: false, error: normalizedCost.error }; const tx = await pengContract.methods.mint(connectedAccount, mintAmount).send({ from: connectedAccount, value: web3.utils.toBN(totalCost).mul(web3.utils.toBN(mintAmount)) }); return { success: true, txHash: tx.transactionHash }; } catch (error) { return { success: false, error: error.message }; } } // --- UI Module: Visible interface logic --- const AppState = { isConnected: false, isPolygon: false, }; function create_panel(label, buttonText, onClick) { const panel = document.createElement("div"); panel.className = "panel"; const title = document.createElement("h3"); title.textContent = label; panel.appendChild(title); const button = document.createElement("button"); button.textContent = buttonText; button.disabled = !AppState.isConnected || !AppState.isPolygon; button.addEventListener("click", onClick); button.addEventListener("touchstart", onClick); panel.appendChild(button); const result = document.createElement("div"); result.className = "result"; panel.appendChild(result); return panel; } function show_modal(modalId) { const modal = document.getElementById(modalId); modal.style.display = "block"; } function hide_modal(modalId) { const modal = document.getElementById(modalId); modal.style.display = "none"; } function update_ui_state(connectButton, networkSettings, networkIcon, networkStatus, networkError, approvalError, buttons, inputs, isConnected, isPolygon, account = null) { AppState.isConnected = isConnected; AppState.isPolygon = isPolygon; connectButton.textContent = isConnected && account ? `${account.slice(0, 4)}...${account.slice(-4)}` : "Connect Wallet"; networkSettings.innerHTML = isConnected && isPolygon ? `<img src="${POLYGON_ICON}" alt="Polygon" style="width: 24px; height: 24px;">` : OTHER_CHAIN_ICON; buttons.forEach(btn => btn.disabled = !isConnected || !isPolygon); inputs.forEach(input => input.disabled = !isConnected || !isPolygon); if (!isConnected || !isPolygon) { networkError.style.display = "block"; } else { networkError.style.display = "none"; } } function toggle_mode() { const body = document.body; const modeToggle = document.getElementById("modeToggle"); const isDark = body.classList.toggle("dark-mode"); modeToggle.textContent = isDark ? "☀️" : "🌙"; localStorage.setItem("darkMode", isDark ? "enabled" : "disabled"); } function apply_system_mode() { const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches; const savedMode = localStorage.getItem("darkMode"); const body = document.body; const modeToggle = document.getElementById("modeToggle"); if (savedMode === "enabled" || (savedMode === null && prefersDark)) { body.classList.add("dark-mode"); modeToggle.textContent = "☀️"; } else { body.classList.remove("dark-mode"); modeToggle.textContent = "🌙"; } } function render_section1(networkIcon, connectButton, networkSettings, networkStatus, networkError, approvalError, buttons, inputs) { const grid = document.getElementById("section1-grid"); // Placeholder for additional panels if needed } function render_section2(networkIcon, connectButton, networkSettings, networkStatus, networkError, approvalError, buttons, inputs) { const grid = document.getElementById("section2-grid"); const tradeButton = document.getElementById("tradeButton"); tradeButton.addEventListener("click", () => { window.open("https://dexscreener.com/polygon/0x8eb0dd7203c2b9294287c1d46c36536e355d23c4", "_blank"); }); tradeButton.addEventListener("touchstart", () => { window.open("https://dexscreener.com/polygon/0x8eb0dd7203c2b9294287c1d46c36536e355d23c4", "_blank"); }); const dispenseButton = document.getElementById("dispenseButton"); const dispenserModal = document.getElementById("dispenserModal"); const dispenserModalClose = document.getElementById("dispenserModalClose"); const dispenserAmount = document.getElementById("dispenserAmount"); const dispenserCost = document.getElementById("dispenserCost"); const dispenserExecute = document.getElementById("dispenserExecute"); dispenseButton.addEventListener("click", async () => { if (!AppState.isConnected || !AppState.isPolygon) return; show_modal("dispenserModal"); const lusdContract = new web3.eth.Contract(LUSD_ABI, LUSD_ADDRESS); const priceRaw = await lusdContract.methods.getPrice().call(); const price = Math.abs(parseFloat(web3.utils.fromWei(priceRaw, "nanoether"))); dispenserAmount.addEventListener("input", () => { const amount = parseFloat(dispenserAmount.value) || 0; const cost = amount / price; dispenserCost.textContent = cost.toFixed(8); const costNormalized = normalize_amount(cost.toString()); check_approval(DISPENSER_ADDRESS, costNormalized.value).then(isApproved => { dispenserExecute.textContent = isApproved ? "Execute" : "Approve"; }); }); const amount = parseFloat(dispenserAmount.value) || 0; const cost = amount / price; dispenserCost.textContent = cost.toFixed(8); const costNormalizedInitial = normalize_amount(cost.toString()); const isApprovedInitial = await check_approval(DISPENSER_ADDRESS, costNormalizedInitial.value); dispenserExecute.textContent = isApprovedInitial ? "Execute" : "Approve"; dispenserExecute.addEventListener("click", async () => { const amount = parseFloat(dispenserAmount.value) || 0; const cost = amount / price; const costNormalized = normalize_amount(cost.toString()); if (dispenserExecute.textContent === "Approve") { const result = await approve_wpol(DISPENSER_ADDRESS, costNormalized.value); if (result.success) { dispenserExecute.textContent = "Execute"; } else { alert(`Approval failed: ${result.error}`); } } else if (dispenserExecute.textContent === "Execute") { const result = await dispense_wpol(cost.toString(), networkIcon); if (result.success) { hide_modal("dispenserModal"); } else { alert(`Dispense failed: ${result.error}`); } } }); dispenserExecute.addEventListener("touchstart", async () => { const amount = parseFloat(dispenserAmount.value) || 0; const cost = amount / price; const costNormalized = normalize_amount(cost.toString()); if (dispenserExecute.textContent === "Approve") { const result = await approve_wpol(DISPENSER_ADDRESS, costNormalized.value); if (result.success) { dispenserExecute.textContent = "Execute"; } else { alert(`Approval failed: ${result.error}`); } } else if (dispenserExecute.textContent === "Execute") { const result = await dispense_wpol(cost.toString(), networkIcon); if (result.success) { hide_modal("dispenserModal"); } else { alert(`Dispense failed: ${result.error}`); } } }); }); dispenseButton.addEventListener("touchstart", async () => { if (!AppState.isConnected || !AppState.isPolygon) return; show_modal("dispenserModal"); const lusdContract = new web3.eth.Contract(LUSD_ABI, LUSD_ADDRESS); const priceRaw = await lusdContract.methods.getPrice().call(); const price = Math.abs(parseFloat(web3.utils.fromWei(priceRaw, "nanoether"))); dispenserAmount.addEventListener("input", () => { const amount = parseFloat(dispenserAmount.value) || 0; const cost = amount / price; dispenserCost.textContent = cost.toFixed(8); const costNormalized = normalize_amount(cost.toString()); check_approval(DISPENSER_ADDRESS, costNormalized.value).then(isApproved => { dispenserExecute.textContent = isApproved ? "Execute" : "Approve"; }); }); const amount = parseFloat(dispenserAmount.value) || 0; const cost = amount / price; dispenserCost.textContent = cost.toFixed(8); const costNormalizedInitial = normalize_amount(cost.toString()); const isApprovedInitial = await check_approval(DISPENSER_ADDRESS, costNormalizedInitial.value); dispenserExecute.textContent = isApprovedInitial ? "Execute" : "Approve"; dispenserExecute.addEventListener("click", async () => { const amount = parseFloat(dispenserAmount.value) || 0; const cost = amount / price; const costNormalized = normalize_amount(cost.toString()); if (dispenserExecute.textContent === "Approve") { const result = await approve_wpol(DISPENSER_ADDRESS, costNormalized.value); if (result.success) { dispenserExecute.textContent = "Execute"; } else { alert(`Approval failed: ${result.error}`); } } else if (dispenserExecute.textContent === "Execute") { const result = await dispense_wpol(cost.toString(), networkIcon); if (result.success) { hide_modal("dispenserModal"); } else { alert(`Dispense failed: ${result.error}`); } } }); dispenserExecute.addEventListener("touchstart", async () => { const amount = parseFloat(dispenserAmount.value) || 0; const cost = amount / price; const costNormalized = normalize_amount(cost.toString()); if (dispenserExecute.textContent === "Approve") { const result = await approve_wpol(DISPENSER_ADDRESS, costNormalized.value); if (result.success) { dispenserExecute.textContent = "Execute"; } else { alert(`Approval failed: ${result.error}`); } } else if (dispenserExecute.textContent === "Execute") { const result = await dispense_wpol(cost.toString(), networkIcon); if (result.success) { hide_modal("dispenserModal"); } else { alert(`Dispense failed: ${result.error}`); } } }); }); dispenserModalClose.addEventListener("click", () => hide_modal("dispenserModal")); dispenserModalClose.addEventListener("touchstart", () => hide_modal("dispenserModal")); dispenserModal.addEventListener("click", (e) => { if (e.target === dispenserModal) hide_modal("dispenserModal"); }); dispenserModal.addEventListener("touchstart", (e) => { if (e.target === dispenserModal) hide_modal("dispenserModal"); }); const freebaseButton = document.getElementById("freebaseButton"); freebaseButton.addEventListener("click", async () => { if (!AppState.isConnected || !AppState.isPolygon) return; const result = await execute_freebase(networkIcon); if (!result.success) { alert(`Freebase failed: ${result.error}`); } }); freebaseButton.addEventListener("touchstart", async () => { if (!AppState.isConnected || !AppState.isPolygon) return; const result = await execute_freebase(networkIcon); if (!result.success) { alert(`Freebase failed: ${result.error}`); } }); const freebaserPanel = create_panel("Freebaser", "Execute Freebase", async () => { const result = await execute_freebase(networkIcon); freebaserPanel.querySelector(".result").textContent = result.success ? `Freebase Executed: ${result.txHash}` : `Error: ${result.error}`; }); grid.appendChild(freebaserPanel); const dispenserPanel = document.createElement("div"); dispenserPanel.className = "panel"; const dispenserTitle = document.createElement("h3"); dispenserTitle.textContent = "Dispenser"; dispenserPanel.appendChild(dispenserTitle); const dispenseInput = document.createElement("input"); dispenseInput.type = "number"; dispenseInput.placeholder = "Amount of WPOL"; dispenseInput.disabled = !AppState.isConnected || !AppState.isPolygon; dispenserPanel.appendChild(dispenseInput); const approveButton = document.createElement("button"); approveButton.textContent = "Approve WPOL"; approveButton.disabled = !AppState.isConnected || !AppState.isPolygon; approveButton.addEventListener("click", async () => { const amount = dispenseInput.value; const normalized = normalize_amount(amount); if (!normalized.success) { dispenserPanel.querySelector(".result").textContent = `Error: ${normalized.error}`; return; } const result = await approve_wpol(DISPENSER_ADDRESS, normalized.value); dispenserPanel.querySelector(".result").textContent = result.success ? `Approved: ${result.txHash}` : `Error: ${result.error}`; approvalError.style.display = "none"; }); approveButton.addEventListener("touchstart", async () => { const amount = dispenseInput.value; const normalized = normalize_amount(amount); if (!normalized.success) { dispenserPanel.querySelector(".result").textContent = `Error: ${normalized.error}`; return; } const result = await approve_wpol(DISPENSER_ADDRESS, normalized.value); dispenserPanel.querySelector(".result").textContent = result.success ? `Approved: ${result.txHash}` : `Error: ${result.error}`; approvalError.style.display = "none"; }); dispenserPanel.appendChild(approveButton); const dispenseButtonPanel = document.createElement("button"); dispenseButtonPanel.textContent = "Dispense Tokens"; dispenseButtonPanel.disabled = !AppState.isConnected || !AppState.isPolygon; dispenseButtonPanel.addEventListener("click", async () => { const amount = dispenseInput.value; const result = await dispense_wpol(amount, networkIcon); dispenserPanel.querySelector(".result").textContent = result.success ? `Dispensed: ${result.txHash}` : `Error: ${result.error}`; approvalError.style.display = result.error === "Insufficient WPOL approval" ? "block" : "none"; }); dispenseButtonPanel.addEventListener("touchstart", async () => { const amount = dispenseInput.value; const result = await dispense_wpol(amount, networkIcon); dispenserPanel.querySelector(".result").textContent = result.success ? `Dispensed: ${result.txHash}` : `Error: ${result.error}`; approvalError.style.display = result.error === "Insufficient WPOL approval" ? "block" : "none"; }); dispenserPanel.appendChild(dispenseButtonPanel); const dispenseResult = document.createElement("div"); dispenseResult.className = "result"; dispenserPanel.appendChild(dispenseResult); grid.appendChild(dispenserPanel); } function render_section3(networkIcon, connectButton, networkSettings, networkStatus, networkError, approvalError, buttons, inputs) { const grid = document.getElementById("section3-grid"); const modeToggle = document.getElementById("modeToggle"); modeToggle.addEventListener("click", toggle_mode); modeToggle.addEventListener("touchstart", toggle_mode); const pengPanel = document.createElement("div"); pengPanel.className = "panel"; const pengTitle = document.createElement("h3"); pengTitle.textContent = "Peng NFT"; pengPanel.appendChild(pengTitle); const mintInput = document.createElement("input"); mintInput.type = "number"; mintInput.placeholder = "Number of NFTs"; mintInput.disabled = !AppState.isConnected || !AppState.isPolygon; pengPanel.appendChild(mintInput); const mintButton = document.createElement("button"); mintButton.textContent = "Mint NFTs"; mintButton.disabled = !AppState.isConnected || !AppState.isPolygon; mintButton.addEventListener("click", async () => { const amount = mintInput.value; const result = await mint_nfts(amount, networkIcon); pengPanel.querySelector(".result").textContent = result.success ? `Minted: ${result.txHash}` : `Error: ${result.error}`; }); mintButton.addEventListener("touchstart", async () => { const amount = mintInput.value; const result = await mint_nfts(amount, networkIcon); pengPanel.querySelector(".result").textContent = result.success ? `Minted: ${result.txHash}` : `Error: ${result.error}`; }); pengPanel.appendChild(mintButton); const mintResult = document.createElement("div"); mintResult.className = "result"; pengPanel.appendChild(mintResult); grid.appendChild(pengPanel); } function init_app() { const connectButton = document.getElementById("connectWallet"); const networkSettings = document.getElementById("networkSettings"); const networkIcon = document.getElementById("networkIcon"); const networkStatus = document.getElementById("networkStatus"); const networkError = document.getElementById("networkError"); const approvalError = document.getElementById("approvalError"); const networkModal = document.getElementById("networkModal"); const modalClose = document.getElementById("modalClose"); const buttons = Array.from(document.getElementsByTagName("button")).filter(btn => btn !== connectButton && btn !== networkSettings && btn !== modalClose); const inputs = Array.from(document.getElementsByTagName("input")); apply_system_mode(); window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", apply_system_mode); connectButton.addEventListener("click", async () => { if (!AppState.isConnected) { const result = await connect_wallet(networkIcon); if (result.success) { const isPolygon = await handle_network(networkIcon); update_ui_state(connectButton, networkSettings, networkIcon, networkStatus, networkError, approvalError, buttons, inputs, true, isPolygon.success, result.account); if (!isPolygon.success) { show_modal("networkModal"); } } else { alert(`Connection failed: ${result.error}`); } } else { await disconnect_wallet(); update_ui_state(connectButton, networkSettings, networkIcon, networkStatus, networkError, approvalError, buttons, inputs, false, false); hide_modal("networkModal"); } }); connectButton.addEventListener("touchstart", async () => { if (!AppState.isConnected) { const result = await connect_wallet(networkIcon); if (result.success) { const isPolygon = await handle_network(networkIcon); update_ui_state(connectButton, networkSettings, networkIcon, networkStatus, networkError, approvalError, buttons, inputs, true, isPolygon.success, result.account); if (!isPolygon.success) { show_modal("networkModal"); } } else { alert(`Connection failed: ${result.error}`); } } else { await disconnect_wallet(); update_ui_state(connectButton, networkSettings, networkIcon, networkStatus, networkError, approvalError, buttons, inputs, false, false); hide_modal("networkModal"); } }); networkSettings.addEventListener("click", async () => { if (AppState.isConnected && !AppState.isPolygon) { await switch_to_polygon(); const isPolygon = await handle_network(networkIcon); update_ui_state(connectButton, networkSettings, networkIcon, networkStatus, networkError, approvalError, buttons, inputs, true, isPolygon.success, connectedAccount); if (isPolygon.success) hide_modal("networkModal"); } }); networkSettings.addEventListener("touchstart", async () => { if (AppState.isConnected && !AppState.isPolygon) { await switch_to_polygon(); const isPolygon = await handle_network(networkIcon); update_ui_state(connectButton, networkSettings, networkIcon, networkStatus, networkError, approvalError, buttons, inputs, true, isPolygon.success, connectedAccount); if (isPolygon.success) hide_modal("networkModal"); } }); modalClose.addEventListener("click", () => hide_modal("networkModal")); modalClose.addEventListener("touchstart", () => hide_modal("networkModal")); networkModal.addEventListener("click", (e) => { if (e.target === networkModal) hide_modal("networkModal"); }); networkModal.addEventListener("touchstart", (e) => { if (e.target === networkModal) hide_modal("networkModal"); }); update_ui_state(connectButton, networkSettings, networkIcon, networkStatus, networkError, approvalError, buttons, inputs, AppState.isConnected, AppState.isPolygon); render_section1(networkIcon, connectButton, networkSettings, networkStatus, networkError, approvalError, buttons, inputs); render_section2(networkIcon, connectButton, networkSettings, networkStatus, networkError, approvalError, buttons, inputs); render_section3(networkIcon, connectButton, networkSettings, networkStatus, networkError, approvalError, buttons, inputs); } document.addEventListener("DOMContentLoaded", init_app);